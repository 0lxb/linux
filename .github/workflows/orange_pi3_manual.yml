name: OrangePi3 Kernel ARM64 Manual

on:
        #push:
        #  branches: [ master ]
        #pull_request:
        #  branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    name: build linux master
    runs-on: ubuntu-20.04

    steps:
    - name: cleanup ubuntu server
      env:
          DEBIAN_FRONTEND: noninteractive
      run: |
          sudo sed -i "s/\# deb-src/deb-src/g" /etc/apt/sources.list
          df -h
          echo "Removing docker images"
          docker rmi `docker images -q`
          df -h
          echo "Removing large directories"
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          echo "Listing 100 largest packages"
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
          df -h
          echo "Removing large packages"
          sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel
          sudo -E apt-get -y purge ghc* zulu* llvm* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* moby* snapd* || true
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h
          sudo -E apt-get update
          sudo -E apt-get build-dep -y linux
          sudo -E apt-get install -y crossbuild-essential-arm64 wget
          sudo -E apt-get install binutils-dev
          sudo -E apt-get install libreadline-dev
          sudo -E apt-get install libelf-dev
          sudo -E apt-get install dwarves
          sudo -E apt-get install clang llvm
          sudo wget https://developer.arm.com/-/media/Files/downloads/gnu/11.2-2022.02/binrel/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz
          sudo tar -xf gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz -C /opt/
          ls -lahtr /opt/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu/bin
          export PATH=/opt/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu/bin:$PATH
          echo "Print env"
          env
          df -h
    - name: checkout
      uses: actions/checkout@v3
      with:
          ref: master

    - name: make defconfig
      run: |
          ls -lahtr /opt/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu/bin
          export PATH=/opt/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu/bin:$PATH
          make CROSS_COMPILE=aarch64-none-linux-gnu- ARCH=arm64 sun50iw6p1_orangepi3_defconfig
          scripts/config --enable DEBUG_INFO
          scripts/config --enable DEBUG_INFO_DWARF4
          scripts/config --enable DEBUG_INFO_COMPRESSED
          scripts/config --enable DEBUG_INFO_BTF
          scripts/config --enable PAHOLE_HAS_SPLIT_BTF
          scripts/config --enable DEBUG_INFO_BTF_MODULES
          scripts/config --enable MODULE_ALLOW_BTF_MISMATCH
          scripts/config --enable GDB_SCRIPTS
          scripts/config --enable CONFIG_KASAN
          scripts/config --enable CONFIG_KASAN_GENERIC
          scripts/config --enable CONFIG_KASAN_OUTLINE
          scripts/config --enable CONFIG_KASAN_STACK
          scripts/config --enable CONFIG_KASAN_VMALLOC
          scripts/config --module CONFIG_KASAN_KUNIT_TEST
          scripts/config --module CONFIG_KASAN_MODULE_TEST
          make CROSS_COMPILE=aarch64-none-linux-gnu- ARCH=arm64 olddefconfig

    - name: make all
      run: |
          mkdir ./tmp
          ls -lahtr /opt/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu/bin
          export PATH=/opt/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu/bin:$PATH
          # make CROSS_COMPILE=aarch64-none-linux-gnu- ARCH=arm64 all
          make CROSS_COMPILE=aarch64-none-linux-gnu- ARCH=arm64 bindeb-pkg
          make CROSS_COMPILE=aarch64-none-linux-gnu- ARCH=arm64 tools/perf
          make CROSS_COMPILE=aarch64-none-linux-gnu- ARCH=arm64 headers_install
          make CROSS_COMPILE=aarch64-none-linux-gnu- ARCH=arm64  -C samples/bpf
          # make CROSS_COMPILE=aarch64-none-linux-gnu- ARCH=arm64 tools/bpf
          # make CROSS_COMPILE=aarch64-none-linux-gnu- ARCH=arm64 tools/bpf DESTDIR=./tmp install
          # make CROSS_COMPILE=aarch64-none-linux-gnu- ARCH=arm64 modules_install INSTALL_MOD_PATH=./tmp
          # make CROSS_COMPILE=aarch64-none-linux-gnu- ARCH=arm64 headers_install INSTALL_HDR_PATH=./tmp

    - name: prepare artifact
      run: |
          mkdir -p ./release
          mkdir -p ./artifact/
          mkdir -p ./artifact/deb
          mkdir -p ./artifact/tools
          mkdir -p ./artifact/boot
          mkdir -p ./artifact/boot/dtb
          mkdir -p ./artifact/boot/dtb/allwinner
          mkdir -p ./artifact/boot/dtb/allwinner/overlay
          # cp -rf $(find ./bin/targets/ -name "*.bin" -type f) ./artifact/
          # cp -rvf ./.config ./artifact/boot/config
          # cp -rvf ./vmlinux ./artifact/boot/
          # cp -rvf ./System.map ./artifact/boot/
          # cp -rvf ./arch/arm64/boot/Image ./artifact/boot/
          cp -rvf ./arch/arm64/boot/dts/allwinner/*.dtb ./artifact/boot/dtb/allwinner
          cp -rvf ./arch/arm64/boot/dts/allwinner/overlay/*.dtbo ./artifact/boot/dtb/allwinner/overlay
          cp -rvf ./arch/arm64/boot/dts/allwinner/overlay/*.scr ./artifact/boot/dtb/allwinner/overlay
          cp -rvf ./arch/arm64/boot/dts/allwinner/overlay/README* ./artifact/boot/dtb/allwinner/overlay
          # cp -rvf ./tmp/lib ./artifact/
          cp -rvf ./../*.deb ./artifact/deb/
          cp -rvf ./tools/perf/perf ./artifact/tools/
          cp -rvf ./tools/bpf ./artifact/tools/tools_bpf
          cp -rvf ./samples/bpf ./artifact/tools/samples_bpf
          # cp -rvf ./tmp/include ./artifact/
          # rm -rvf $(find ./artifact/lib/modules  -name "source")
          # rm -rvf $(find ./artifact/lib/modules  -name "build")
          # cp -rvf ./tmp/usr ./artifact/tools/
          # tar -czf orangepi3_firmware.tgz ./artifact/boot ./artifact/lib ./artifact/include ./artifact/deb ./artifact/tools
          tar -czf orangepi3_firmware.tgz ./artifact/boot ./artifact/deb ./artifact/tools
          mv orangepi3_firmware.tgz ./release/

          #    - name: deliver firmware
          #      uses: actions/upload-artifact@v3
          #      with:
          #          name: orangepi3_firmware
          #          path: ./artifact/

    - name: Generate release tag
      id: tag
      run: |
        echo "::set-output name=release_tag::orangepi3_debug_$(date +"%Y.%m.%d_%H-%M")"

    - name: release with notes
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        files: ./release/orangepi3_firmware.tgz
